BeanFactory and ApplicationContext
- ApplicationContext extends BeanFactory (sub-interface)
- There are various implementation of ApplicationContext
- BeanFactory provides configuration mechanism capable of managing all type of object
- BeanFactory also provides configuration framework and basic functionality
- ApplicationContext adds more enterprise-specific functionality

Beans
- Objects that are managed by Spring IoC container are called Beans
- Bean is an object that is instantiated, assembled and otherwise managed by a Spring IoC container
- Beans, and the dependencies among them, are reflected in the configuration metadata used by a container
- Configuration metadata is represented in XML, Java annotations or Java code
- Your application classes are combined with configuration metadata so that, 
  after the ApplicationContext is created and initialized, you have a fully configured and executable system or application
- Configuration Metadata : XML, Java annotations or Java code
- Within the container beans are represented as BeanDefinition, with some additional properties
- Naming bean <alias/> can be used for multiple names - more analysis required
- Need to differentiate id and name propert of <bean>


1.  XML-based configuration
- Beans are configured as <bean/> elements inside a top-level <beans/> element (@Bean)
- The id attribute of <bean/> is a string that identifies the individual bean definition (refers to the name of reference variable)
- The class attribute of <bean/> defines the type of the bean and uses the fully qualified classname (fully qualified name of the class)
- We can have multiple xml configuration metadata, based on logical layer or module in your architecture
  e.g. services.xml and dao.xml
- While instantiating the container, we can pick as many configuration metadata files as we want,
  or we can import one xml(services.xml) into another(dao.xml) as <import resource="services.xml"/>,
  and then we can instantiate container as :
  ApplicationContext context = new ClassPathXmlApplicationContext("dao.xml");
- Once we have context, we can use T getBean(String name, Class<T> requiredType), required instance can be retrieved

=> mandatory no-arg constructor 
	a) 	<bean id="OrderManager" class="com.exchange.OrderManager">
			<property name="symbolValidator" ref="someSymbolValidator"/>
		</bean>
		In this case no-arg constructor is required, only if OrderManager has an explicit constructor (else default constructor is used)
	b)	<bean id="OrderManager" class="com.exchange.OrderManager" />
		In this case no-arg constructor is not mandatory as Spring will use default constructor
	c) 	<bean id="OrderManager" class="com.exchange.OrderManager">
			<constructor-arg ref="someSymbolValidator"/>
		</bean>
		In this case no-arg constructor is not mandatory as Spring doesn't need (constructor with required arg will be used)
		
=> Dependency Injection(DI)
	- DI is a process whereby objects define their dependencies (that is, the other objects with which they work)
	- Container injects dependencies(required by a bean), when it creates a bean (hence it is called IoC)
	- There are 2 major variants of DI
		a) Constructor-based DI :
			- It is accomplished by the container, by invoking a constructor with a number of arguments, each representing a dependency
			- Constructor argument resolution matching occurs by using the argument’s type(If no potential ambiguity exists)
			  Ambiguity here may occur, when there are parameters that are not related by inheritance

				package x.y;
				public class ThingOne {
					public ThingOne(ThingTwo thingTwo, ThingThree thingThree) {
					// ...
					}
				}
				
				<beans>
					<bean id="thingOne" class="x.y.ThingOne">
					<constructor-arg ref="thingTwo"/>
						<constructor-arg ref="thingThree"/>
					</bean>
					<bean id="thingTwo" class="x.y.ThingTwo"/>
					<bean id="thingThree" class="x.y.ThingThree"/>
				</beans>
				
				In the example above type of constructor argument suffice, as ThingTwo and ThingThree are not related by inheritance
				
			- Constructor argument type matching : can be achieved by using the type attribute of <constructor-arg>
				e.g. <constructor-arg type="java.lang.String" value="someStringValue"/>
			- Constructor argument index : can be achieved by using the index attribute to explicitly specify the index of constructor arguments
				e.g. <constructor-arg index="0" value="someValue"/>
				The index is 0-based
			- Constructor argument name : can use the constructor parameter name for value disambiguation
				e.g. <constructor-arg name="years" value="7500000"/>
				There is a condition which says "your code must be compiled with the debug flag enabled" to use name
				
		b) Setter-based Dependency Injection :
			- It is accomplished by the container calling setter methods on your beans after invoking a no-argument constructor to instantiate bean
			- Naming convention for setter method :
			
				private MovieFinder someMovieFinder;
				void setSomeMovieFinder(MovieFinder someMovieFinder) {
					this.someMovieFinder = someMovieFinder;
				}
			
		- It is a good rule of thumb to use constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies
		  (though @Required can be used in setter injection for required dependencies)	

=> Dependency Resolution Process	  
	- The ApplicationContext is created and initialized with configuration data (xml, annotations or java config),
	  it also validates the configuration of each bean, but bean properties are not set until, bean is actually created	
	- For a bean, it's dependencies(that are expressed in the form of property or constructor-arg) are provided only when it is actually created
	- Each property or constructor-arg of a bean can be a value to set, or reference to another bean in the container	
	- Spring can convert a value supplied in string format to all built-in types, such as int, long, String, boolean, and so forth
	- Beans that are singleton-scoped and set to be pre-instantiated (the default) are created when the container is created, 
	  otherwise it is created only when it is requested
	- Default behaviour is set to pre-instantiated so as to avoid container throwing Exception during its creation (might be because if it fails to create a object or one of its dependencies)  
	- Creation of a bean potentially causes a graph of beans to be created, as the bean’s dependencies and its dependencies' dependencies (and so on) are created and assigned
	- At the cost of some upfront time and memory to create these beans before they are actually needed, you discover configuration issues when the ApplicationContext is created, not later

=> XML Shortcut p-namespace
    - Lets you use the bean element’s attributes (instead of nested <property/> elements) to describe your property values collaborating beans, or both
	e.g.
	<!-- traditional declaration -->
	<bean name="john-classic" class="com.example.Person">
        <property name="name" value="John Doe"/>
        <property name="spouse" ref="jane"/>
    </bean>

	<!-- p-namespace declaration -->
    <bean name="john-modern"
        class="com.example.Person"
        p:name="John Doe"
        p:spouse-ref="jane"/>

    <bean name="jane" class="com.example.Person">
        <property name="name" value="Jane Doe"/>
    </bean>
		
=> XML Shortcut c-namespace		
	Allows inlined attributes for configuring the constructor arguments rather then nested constructor-arg elements
	e.g.
    <!-- traditional declaration -->
    <bean id="thingOne" class="x.y.ThingOne">
        <constructor-arg ref="thingTwo"/>
        <constructor-arg value="something@somewhere.com"/>
    </bean>

    <!-- c-namespace declaration -->
    <bean id="thingOne" class="x.y.ThingOne" 
		  c:thingTwo-ref="thingTwo" 
		  c:email="something@somewhere.com"/>
		
	<bean id="thingTwo" class="x.y.ThingThree"/>	
		
=> Compound Property name
	<bean id="something" class="things.ThingOne">
		<property name="fred.bob.sammy" value="123" />
	</bean>		
	The something bean has a fred property, which has a bob property, 
	which has a sammy property, and that final sammy property is being set to a value of 123. 
	In order for this to work, the fred property of something and the bob property of fred must not be null after the bean is constructed. 
	Otherwise, a NullPointerException is thrown.	
		
=> Lazy-initialized Beans
	- A lazy-initialized bean tells the IoC container to create a bean instance when it is first requested, rather than at startup
	- By Default, ApplicationContext creates and configures beans eagerly
	- This pre-instantiation is desirable, because the errors in the cinfigurations are discovered immediately
	- When this behavior is not desirable, you can prevent pre-instantiation of a singleton bean by marking the bean definition as being lazy-initialized	
	- A lazy-initialized bean tells the IoC container to create a bean instance when it is first requested, rather than at startup	
		<bean id="lazy" class="com.something.ExpensiveToCreateBean" lazy-init="true"/>
		<bean name="not.lazy" class="com.something.AnotherBean"/>
	- You can also control lazy-initialization at the container level by using the default-lazy-init attribute on the <beans/> element
		<beans default-lazy-init="true">
			<!-- no beans will be pre-instantiated... -->
		</beans>

=> Autowiring Collaborators
	- You can let Spring resolve collaborators (other beans) automatically for your bean by inspecting the contents of the ApplicationContext
	- Default value is NO, changing the default setting is not recommended, because specifying collaborators explicitly gives greater control and clarity
		a) 'byName' : Spring looks for a bean with the same name as the property that needs to be autowired
					  setter method for that property is required	
		b) 'byType' : Lets a property be autowired if exactly one bean of the property type exists in the container
					  If multiple properties of same type exist, it throws fatal exception, saying you may not want to use byType 
		c) 'constructor' : Analogous to byType but applies to constructor arguments
						   If there is not exactly one bean of the constructor argument type in the container, a fatal error is raised	
						   
	- 	<!-- traditional way - Manual wiring -->
		<bean id="customer" class="a.b.Customer">
            <property name="person" ref="person" />
		</bean>
		<bean id="person" class="a.b.Person" />	
		
		<!-- Auto-Wiring ‘byName’ -->
		<bean id="customer" class="com.mkyong.common.Customer" autowire="byName" />
		<bean id="person" class="com.mkyong.common.Person" />
		
	- Explicit dependencies in property and constructor-arg settings always override autowiring
	- You cannot autowire simple properties such as primitives, Strings, and Classes (and arrays of such simple properties), this limitation is by-design	
	- Spring is careful to avoid guessing in case of ambiguity that might have unexpected results
	
		
		
		
		
		